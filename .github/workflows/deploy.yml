# Note the deployed model should have /info that shows the change log and version number.
# Commit your changes and push them. Then we will tag our release with the v0.0.1 release:
# git add .
# git commit -m "created info endpoint"
# git push
# git tag "v0.0.1"
# This will trigger the deploy.yml.
# git push origin v0.0.1

name: Deploy the release version of the ML model(s) to testing and prod environment.

on:
  push:
    branches:
      - main
    tags:
      # - 'v*.*.*'
      # Push events to match v*, i.e. v1.0, v20.15.10.
      - 'v*'
  workflow_dispatch:
    inputs:
      choice:
        type: choice
        description: Select the environment
        options:
        - dev
        - prod

jobs:
  build-and-push-image-to-docker-hub:
    environment: "prod"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository.
        uses: actions/checkout@v4

      # https://stackoverflow.com/questions/58177786/get-the-current-pushed-tag-in-github-actions
      - name: Get release version.
        # $RELEASE_VERSION is blank.
        # $GITHUB_REF_NAME = v1.0.5
        # ${{ github.ref_name }} = v1.0.5
        # ${{ github.ref }} = refs/tags/v1.0.5
        # ${{ github.event.release.tag_name }} is blank.
        # $GIT_TAG is blank.
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo $RELEASE_VERSION
      - run: |
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
      - run: |
          echo "Tag name from github.ref_name: ${{ github.ref_name }}"
      - run: |
          echo "github.ref: ${{ github.ref }}"
      - run: |
          echo "github.event.release.tag_name: ${{ github.event.release.tag_name }}"
      - run: |
          echo "GIT_TAG=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV
          echo $GIT_TAG

      - name: Login to Docker Hub.
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx.
        uses: docker/setup-buildx-action@v3

      - name: Build and push image to Docker Hub.
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ml-model:latest, ${{ secrets.DOCKERHUB_USERNAME }}/ml-model:${{ github.ref_name }}

      - name: Update deployment.yaml
        run: |
          echo ""
          # 20.06.2024 Soon: Disabled these lines. Please update the configuration settings and git push manually. 
          # cd pred-main
          # cd base
          # sed -i 's|image:.*|image: moonysun1314/ml-model:'${{ github.ref_name }}'|' deployment.yaml
          # sed -i 's|tag:.*|tag: '${{ github.ref_name }}'|' deployment.yaml
          # sed -i 's|name: helm-app-configmap.*|name: helm-app-configmap-'${{ github.ref_name }}'|' deployment.yaml
          # git config --global user.name 'sunnymoon1314'
          # git config --global user.email 'moonysun1314@gmail.com'
          # git add deployment.yaml
          # git commit -m "Updated image version to ${{ github.ref_name }} in deployment.yaml."
          # git push

  deploy:
    name: Set up infrastructures and Kubernetes using Terraform.
    needs: [build-and-push-image-to-docker-hub]
    environment: "prod"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository.
        uses: actions/checkout@v4

      - name: Set up Terraform.
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS credentials.
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Make sure we are in the terraform folder where all the deployment tf files are.
      # terraform -chdir=terraform/aws init
      - run: |
          cd ./terraform/aws

      - name: Terraform init.
        run: terraform init

      - name: Terraform workspace list.
        run: terraform workspace list

      - name: Terraform workspace new environment and select.
        run: |
          terraform workspace select prod || terraform workspace new prod
          terraform workspace list

      - name: Terraform plan.
        run: terraform -chdir=terraform/aws plan -var-file=prod.tfvars

      - name: Terraform apply.
        run: terraform -chdir=terraform/aws apply -var-file=prod.tfvars -auto-approve

      - name: Pause 3min to verify bucket creation.
        run: sleep 180

      - name: Terraform destroy.
        run: terraform -chdir=terraform/aws destroy -var-file=prod.tfvars -auto-approve

      # - name: Download model???
        # uses: actions/download-artifact@v2
        # with:
          # name: api
      - run: |
          echo "Deploy infrastructures using Terraform..."
    if: ${{ !always() }}
